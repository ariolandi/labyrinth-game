{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2","program":"/home/stella/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--edition=2018","--crate-name","simple_matrix","/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=a9152961f21278cd","-C","extra-filename=-a9152961f21278cd","--out-dir","/home/stella/rust/project/target/rls/debug/deps","-L","dependency=/home/stella/rust/project/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/stella/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/stella/rust/project/target/rls/debug/deps/libsimple_matrix-a9152961f21278cd.rmeta"},"prelude":{"crate_id":{"name":"simple_matrix","disambiguator":[9612595081329903847,9553127418898565781]},"crate_root":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src","external_crates":[{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4418738106075590160,6298063093324017560]}},{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9113878364975505769,4626460723841361367]}},{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10636203250160794641,6979396832464280682]}},{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7259142600435629501,12221323364939802703]}},{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[245280942947536957,12219005383890086938]}},{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6161946279237914842,16521306710208745576]}},{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6542909105960794691,9677219093962929367]}},{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5468829561226316808,7834745881253856659]}},{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17700629721805382410,8884445337419759755]}},{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5673318663856259921,7992701887106127366]}},{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[14096840682646779984,4894716104918169263]}},{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[17167590092810160364,15681868143498786567]}},{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[9809686796458150241,12960706147778414440]}},{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14218938340851961837,11099897245983054425]}}],"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","byte_start":0,"byte_end":2410,"line_start":1,"line_end":112,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","byte_start":2408,"byte_end":2409,"line_start":112,"line_end":112,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","byte_start":0,"byte_end":2410,"line_start":1,"line_end":112,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":81}],"decl_id":null,"docs":"# Matrix-rs: A generic matrix library in Rust\nMatrix-rs is a simple matrix library designed to be easy to use.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/lib.rs","byte_start":2348,"byte_end":2370,"line_start":108,"line_end":108,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":124},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":2612,"byte_end":2618,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Matrix","qualname":"::matrix::Matrix","value":"Matrix {  }","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128}],"decl_id":null,"docs":" A 2-Dimensional, non-resisable container.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":3064,"byte_end":3067,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<Matrix<T>>::new","value":"fn (rows: usize, cols: usize) -> Matrix<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, non-empty Matrix<T> where cells are set to `T::default`.  \n Use `Matrix::from_iter` if you want to set the matrix from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":3882,"byte_end":3891,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"from_iter","qualname":"<Matrix<T>>::from_iter","value":"fn (rows: usize, cols: usize, data: impl IntoIterator<Item = T>) -> Matrix<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, non-empty Matrix<T> where cells are set from an iterator.  \n The matrix cells are set row by row.  \n The iterator can be infinite, this method only consume `rows * cols`\n values from the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":4480,"byte_end":4484,"line_start":73,"line_end":73,"column_start":12,"column_end":16},"name":"rows","qualname":"<Matrix<T>>::rows","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of rows in the matrix.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":4743,"byte_end":4747,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"cols","qualname":"<Matrix<T>>::cols","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of columns in the matrix.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":5199,"byte_end":5202,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"get","qualname":"<Matrix<T>>::get","value":"fn (&self, row: usize, col: usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Try to get a reference to the value at given row & column.  \n Returns `None` if `row` or `col` is outside of the matrix.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":5843,"byte_end":5850,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Matrix<T>>::get_mut","value":"fn (&mut self, row: usize, col: usize) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Try to get a mutable reference to the cell at given row & column.  \n Returns `None` if `row` or `col` is outside of the matrix.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":6508,"byte_end":6511,"line_start":142,"line_end":142,"column_start":12,"column_end":15},"name":"set","qualname":"<Matrix<T>>::set","value":"fn (&mut self, row: usize, col: usize, value: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Try to set the cell at given row & column to the given value.  \n Returns `false` if `row` or `col` is outside of the matrix.  \n Returns `true` if the cell has been modified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":7094,"byte_end":7101,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"get_row","qualname":"<Matrix<T>>::get_row","value":"fn (&self, row: usize) -> Option<impl Iterator<Item = &T>>","parent":null,"children":[],"decl_id":null,"docs":" Try to get an iterator of all cells of the requested row.  \n Returns `None` if given row is outside of the matrix.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":7688,"byte_end":7695,"line_start":181,"line_end":181,"column_start":12,"column_end":19},"name":"get_col","qualname":"<Matrix<T>>::get_col","value":"fn (&self, col: usize) -> Option<impl Iterator<Item = &T>>","parent":null,"children":[],"decl_id":null,"docs":" Try to get an iterator of all cells of the requested column.  \n Returns `None` if given row is outside of the matrix.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":8389,"byte_end":8398,"line_start":202,"line_end":202,"column_start":12,"column_end":21},"name":"transpose","qualname":"<Matrix<T>>::transpose","value":"fn (&self) -> Matrix<T>","parent":null,"children":[],"decl_id":null,"docs":" Take a *M*x*N* Matrix and construct the transposed *N*x*M* Matrix.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":9298,"byte_end":9303,"line_start":234,"line_end":234,"column_start":12,"column_end":17},"name":"apply","qualname":"<Matrix<T>>::apply","value":"fn <F> (&self, mut func: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Apply a function to all cells of the matrix.  \n Cells are provided as immutable references to the function,\n if you want to modify the cells, use `apply_mut`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":9906,"byte_end":9915,"line_start":252,"line_end":252,"column_start":12,"column_end":21},"name":"apply_mut","qualname":"<Matrix<T>>::apply_mut","value":"fn <F> (&mut self, mut func: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Apply a function to all cells of the matrix.  \n Cells are provided as mutable references to the function,\n and can therefore be modified.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix/iter.rs","byte_start":10222,"byte_end":10228,"line_start":5,"line_end":5,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix/std_ops.rs","byte_start":13517,"byte_end":13523,"line_start":97,"line_end":97,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":2687,"byte_end":2693,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":10039,"byte_end":10045,"line_start":257,"line_end":257,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix/iter.rs","byte_start":10222,"byte_end":10228,"line_start":5,"line_end":5,"column_start":26,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":124},"to":{"krate":2,"index":3703}},{"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix/std_ops.rs","byte_start":13517,"byte_end":13523,"line_start":97,"line_end":97,"column_start":28,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":124},"to":{"krate":2,"index":1606}},{"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":2687,"byte_end":2693,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":124},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/stella/.cargo/registry/src/github.com-1ecc6299db9ec823/simple-matrix-0.1.2/src/matrix.rs","byte_start":10039,"byte_end":10045,"line_start":257,"line_end":257,"column_start":19,"column_end":25},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":124},"to":{"krate":2,"index":1704}}]}